# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Account {
    access_token: String
    expires_at: Int
    id: String!
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
    userId: String!
}

type Asset {
    createdAt: DateTime!
    id: String!
    name: String!
    productId: String!
    updatedAt: DateTime!
    url: String!
}

type Category {
    _count: CategoryCount
    createdAt: DateTime!
    id: String!
    name: String!
    products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
    updatedAt: DateTime!
}

type CategoryCount {
    products: Int!
}

type Client {
    Account(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
    Order(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
    Session(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
    _count: ClientCount
    address: UserAddress
    createdAt: DateTime!
    email: String!
    emailVerified: DateTime
    id: String!
    image: String
    name: String
    phone: String
    preference: UserPreference
    role: ROLE!
    updatedAt: DateTime!
}

type ClientCount {
    Account: Int!
    Order: Int!
    Session: Int!
}

type Order {
    _count: OrderCount
    createdAt: DateTime!
    customer: Client
    id: String!
    products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
    updatedAt: DateTime!
    userId: String
}

type OrderCount {
    products: Int!
}

type Product {
    _count: ProductCount
    assets(cursor: AssetWhereUniqueInput, distinct: [AssetScalarFieldEnum!], orderBy: [AssetOrderByWithRelationInput!], skip: Int, take: Int, where: AssetWhereInput): [Asset!]!
    categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
    count: Int!
    createdAt: DateTime!
    description: String
    id: String!
    name: String!
    orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
    price: Float!
    updatedAt: DateTime!
}

type ProductCount {
    assets: Int!
    categories: Int!
    orders: Int!
}

type Query {
    categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
    findFirstClient(cursor: ClientWhereUniqueInput, distinct: [ClientScalarFieldEnum!], orderBy: [ClientOrderByWithRelationInput!], skip: Int, take: Int, where: ClientWhereInput): Client
    findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
    products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
}

type Session {
    expires: DateTime!
    id: String!
    sessionToken: String!
    userId: String!
}

type UserAddress {
    city: String
    createdAt: DateTime!
    customString: String
    hous: String
    id: String!
    line: String
    number: Int
    updatedAt: DateTime!
    userId: String!
}

type UserPreference {
    createdAt: DateTime!
    id: String!
    updatedAt: DateTime!
    userId: String!
}

enum AccountScalarFieldEnum {
    access_token
    expires_at
    id
    id_token
    provider
    providerAccountId
    refresh_token
    scope
    session_state
    token_type
    type
    userId
}

enum AssetScalarFieldEnum {
    createdAt
    id
    name
    productId
    updatedAt
    url
}

enum CategoryScalarFieldEnum {
    createdAt
    id
    name
    updatedAt
}

enum ClientScalarFieldEnum {
    createdAt
    email
    emailVerified
    id
    image
    name
    password
    phone
    role
    updatedAt
}

enum OrderScalarFieldEnum {
    createdAt
    id
    updatedAt
    userId
}

enum ProductScalarFieldEnum {
    count
    createdAt
    description
    id
    name
    price
    updatedAt
}

enum QueryMode {
    default
    insensitive
}

enum ROLE {
    ADMIN
    CLIENT
}

enum SessionScalarFieldEnum {
    expires
    id
    sessionToken
    userId
}

enum SortOrder {
    asc
    desc
}

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

input AccountListRelationFilter {
    every: AccountWhereInput
    none: AccountWhereInput
    some: AccountWhereInput
}

input AccountOrderByRelationAggregateInput {
    _count: SortOrder
}

input AccountOrderByWithRelationInput {
    access_token: SortOrder
    expires_at: SortOrder
    id: SortOrder
    id_token: SortOrder
    provider: SortOrder
    providerAccountId: SortOrder
    refresh_token: SortOrder
    scope: SortOrder
    session_state: SortOrder
    token_type: SortOrder
    type: SortOrder
    user: ClientOrderByWithRelationInput
    userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
    provider: String!
    providerAccountId: String!
}

input AccountWhereInput {
    AND: [AccountWhereInput!]
    NOT: [AccountWhereInput!]
    OR: [AccountWhereInput!]
    access_token: StringNullableFilter
    expires_at: IntNullableFilter
    id: StringFilter
    id_token: StringNullableFilter
    provider: StringFilter
    providerAccountId: StringFilter
    refresh_token: StringNullableFilter
    scope: StringNullableFilter
    session_state: StringNullableFilter
    token_type: StringNullableFilter
    type: StringFilter
    user: ClientRelationFilter
    userId: StringFilter
}

input AccountWhereUniqueInput {
    id: String
    provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

input AssetListRelationFilter {
    every: AssetWhereInput
    none: AssetWhereInput
    some: AssetWhereInput
}

input AssetOrderByRelationAggregateInput {
    _count: SortOrder
}

input AssetOrderByWithRelationInput {
    createdAt: SortOrder
    id: SortOrder
    name: SortOrder
    productId: SortOrder
    products: ProductOrderByWithRelationInput
    updatedAt: SortOrder
    url: SortOrder
}

input AssetWhereInput {
    AND: [AssetWhereInput!]
    NOT: [AssetWhereInput!]
    OR: [AssetWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    name: StringFilter
    productId: StringFilter
    products: ProductRelationFilter
    updatedAt: DateTimeFilter
    url: StringFilter
}

input AssetWhereUniqueInput {
    id: String
}

input CategoryListRelationFilter {
    every: CategoryWhereInput
    none: CategoryWhereInput
    some: CategoryWhereInput
}

input CategoryOrderByRelationAggregateInput {
    _count: SortOrder
}

input CategoryOrderByWithRelationInput {
    createdAt: SortOrder
    id: SortOrder
    name: SortOrder
    products: ProductOrderByRelationAggregateInput
    updatedAt: SortOrder
}

input CategoryWhereInput {
    AND: [CategoryWhereInput!]
    NOT: [CategoryWhereInput!]
    OR: [CategoryWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    name: StringFilter
    products: ProductListRelationFilter
    updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
    id: String
    name: String
}

input ClientOrderByWithRelationInput {
    Account: AccountOrderByRelationAggregateInput
    Order: OrderOrderByRelationAggregateInput
    Session: SessionOrderByRelationAggregateInput
    address: UserAddressOrderByWithRelationInput
    createdAt: SortOrder
    email: SortOrder
    emailVerified: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    phone: SortOrder
    preference: UserPreferenceOrderByWithRelationInput
    role: SortOrder
    updatedAt: SortOrder
}

input ClientRelationFilter {
    is: ClientWhereInput
    isNot: ClientWhereInput
}

input ClientWhereInput {
    AND: [ClientWhereInput!]
    Account: AccountListRelationFilter
    NOT: [ClientWhereInput!]
    OR: [ClientWhereInput!]
    Order: OrderListRelationFilter
    Session: SessionListRelationFilter
    address: UserAddressRelationFilter
    createdAt: DateTimeFilter
    email: StringFilter
    emailVerified: DateTimeNullableFilter
    id: StringFilter
    image: StringNullableFilter
    name: StringNullableFilter
    phone: StringNullableFilter
    preference: UserPreferenceRelationFilter
    role: EnumROLEFilter
    updatedAt: DateTimeFilter
}

input ClientWhereUniqueInput {
    email: String
    id: String
}

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeFilter
    notIn: [DateTime!]
}

input DateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input EnumROLEFilter {
    equals: ROLE
    in: [ROLE!]
    not: NestedEnumROLEFilter
    notIn: [ROLE!]
}

input FloatFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: NestedFloatFilter
    notIn: [Float!]
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntFilter
    notIn: [Int!]
}

input IntNullableFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntNullableFilter
    notIn: [Int!]
}

input NestedDateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeFilter
    notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input NestedEnumROLEFilter {
    equals: ROLE
    in: [ROLE!]
    not: NestedEnumROLEFilter
    notIn: [ROLE!]
}

input NestedFloatFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: NestedFloatFilter
    notIn: [Float!]
}

input NestedIntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntFilter
    notIn: [Int!]
}

input NestedIntNullableFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntNullableFilter
    notIn: [Int!]
}

input NestedStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input NestedStringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input OrderListRelationFilter {
    every: OrderWhereInput
    none: OrderWhereInput
    some: OrderWhereInput
}

input OrderOrderByRelationAggregateInput {
    _count: SortOrder
}

input OrderOrderByWithRelationInput {
    createdAt: SortOrder
    customer: ClientOrderByWithRelationInput
    id: SortOrder
    products: ProductOrderByRelationAggregateInput
    updatedAt: SortOrder
    userId: SortOrder
}

input OrderWhereInput {
    AND: [OrderWhereInput!]
    NOT: [OrderWhereInput!]
    OR: [OrderWhereInput!]
    createdAt: DateTimeFilter
    customer: ClientRelationFilter
    id: StringFilter
    products: ProductListRelationFilter
    updatedAt: DateTimeFilter
    userId: StringNullableFilter
}

input OrderWhereUniqueInput {
    id: String
}

input ProductListRelationFilter {
    every: ProductWhereInput
    none: ProductWhereInput
    some: ProductWhereInput
}

input ProductOrderByRelationAggregateInput {
    _count: SortOrder
}

input ProductOrderByWithRelationInput {
    assets: AssetOrderByRelationAggregateInput
    categories: CategoryOrderByRelationAggregateInput
    count: SortOrder
    createdAt: SortOrder
    description: SortOrder
    id: SortOrder
    name: SortOrder
    orders: OrderOrderByRelationAggregateInput
    price: SortOrder
    updatedAt: SortOrder
}

input ProductRelationFilter {
    is: ProductWhereInput
    isNot: ProductWhereInput
}

input ProductWhereInput {
    AND: [ProductWhereInput!]
    NOT: [ProductWhereInput!]
    OR: [ProductWhereInput!]
    assets: AssetListRelationFilter
    categories: CategoryListRelationFilter
    count: IntFilter
    createdAt: DateTimeFilter
    description: StringNullableFilter
    id: StringFilter
    name: StringFilter
    orders: OrderListRelationFilter
    price: FloatFilter
    updatedAt: DateTimeFilter
}

input ProductWhereUniqueInput {
    id: String
}

input SessionListRelationFilter {
    every: SessionWhereInput
    none: SessionWhereInput
    some: SessionWhereInput
}

input SessionOrderByRelationAggregateInput {
    _count: SortOrder
}

input SessionOrderByWithRelationInput {
    expires: SortOrder
    id: SortOrder
    sessionToken: SortOrder
    user: ClientOrderByWithRelationInput
    userId: SortOrder
}

input SessionWhereInput {
    AND: [SessionWhereInput!]
    NOT: [SessionWhereInput!]
    OR: [SessionWhereInput!]
    expires: DateTimeFilter
    id: StringFilter
    sessionToken: StringFilter
    user: ClientRelationFilter
    userId: StringFilter
}

input SessionWhereUniqueInput {
    id: String
    sessionToken: String
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input StringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input UserAddressOrderByWithRelationInput {
    city: SortOrder
    createdAt: SortOrder
    customString: SortOrder
    hous: SortOrder
    id: SortOrder
    line: SortOrder
    number: SortOrder
    updatedAt: SortOrder
    user: ClientOrderByWithRelationInput
    userId: SortOrder
}

input UserAddressRelationFilter {
    is: UserAddressWhereInput
    isNot: UserAddressWhereInput
}

input UserAddressWhereInput {
    AND: [UserAddressWhereInput!]
    NOT: [UserAddressWhereInput!]
    OR: [UserAddressWhereInput!]
    city: StringNullableFilter
    createdAt: DateTimeFilter
    customString: StringNullableFilter
    hous: StringNullableFilter
    id: StringFilter
    line: StringNullableFilter
    number: IntNullableFilter
    updatedAt: DateTimeFilter
    user: ClientRelationFilter
    userId: StringFilter
}

input UserPreferenceOrderByWithRelationInput {
    createdAt: SortOrder
    id: SortOrder
    updatedAt: SortOrder
    user: ClientOrderByWithRelationInput
    userId: SortOrder
}

input UserPreferenceRelationFilter {
    is: UserPreferenceWhereInput
    isNot: UserPreferenceWhereInput
}

input UserPreferenceWhereInput {
    AND: [UserPreferenceWhereInput!]
    NOT: [UserPreferenceWhereInput!]
    OR: [UserPreferenceWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    updatedAt: DateTimeFilter
    user: ClientRelationFilter
    userId: StringFilter
}
